generator client {
  provider     = "prisma-client"
  output       = "../generated"
  moduleFormat = "esm"
  runtime      = "nodejs"
}

datasource db {
  provider = "sqlite"
  url      = "file:./local.db"
}

enum UserRole {
  TEACHER
  STUDENT
}

enum PollStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdPolls Poll[] @relation("PollCreator")
  votes        Vote[]
}

model Poll {
  id          String       @id @default(uuid())
  question    String
  description String?
  status      PollStatus   @default(ACTIVE)
  startedAt   DateTime?
  endsAt      DateTime?
  createdById String
  createdBy   User         @relation("PollCreator", fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  options     PollOption[]
  votes       Vote[]
}

model PollOption {
  id        String   @id @default(uuid())
  pollId    String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  text      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  votes Vote[]
}

model Vote {
  id           String     @id @default(uuid())
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  submittedAt  DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([pollId, userId])
}
